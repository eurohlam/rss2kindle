<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

    <!--dead letter channel for error handling -->
    <bean id="deadLetterErrorHandler" class="org.apache.camel.builder.DeadLetterChannelBuilder">
        <property name="deadLetterUri" value="seda:errors"/>
    </bean>

    <camel:camelContext id="mainCamelContext" streamCache="true" errorHandlerRef="defErrorHandler">
        <!-- let Camel use those @Component scanned route builders -->
        <camel:contextScan/>

        <camel:errorHandler id="defErrorHandler" type="DeadLetterChannel" deadLetterUri="deadLetterErrorHandler">
            <camel:redeliveryPolicy maximumRedeliveries="3" redeliveryDelay="5000" retryAttemptedLogLevel="ERROR"/>
        </camel:errorHandler>

        <!-- rss to html transforming by xslt-->
        <camel:route id="rss2html">
            <!--<camel:from uri="direct:startTransformation?block=true&amp;timeout=50000"/>-->
            <camel:from uri="file://{{storage.path.rss}}?recursive={{rss2html.file.recursive}}&amp;delete={{rss2html.file.delete}}&amp;initialDelay={{rss2html.file.initialDelay}}&amp;delay={{rss2html.file.delay}}"/>
            <camel:multicast>
                <camel:to uri="direct:text"/>
                <camel:to uri="direct:toc"/>
                <camel:to uri="direct:ncx"/>
                <camel:to uri="direct:opf"/>
            </camel:multicast>
            <camel:setHeader headerName="CamelFileName">
                <camel:simple>${header.CamelFileName}</camel:simple>
            </camel:setHeader>
            <camel:to uri="seda:kindlegen"/>
        </camel:route>

        <camel:route id="text">
            <camel:from uri="direct:text"/>
            <camel:log message="XSLT transforming ${header.CamelFileName} by xslt:rss2html.xsl" loggingLevel="DEBUG" logName="org.roag.camel.rss2html"/>
            <camel:to uri="{{rss2html.template.xslt}}"/>
            <camel:setHeader headerName="CamelFileName">
                <camel:simple>${header.CamelFileName}.htm</camel:simple>
            </camel:setHeader>
            <camel:log message="Save transformation result as html ${header.CamelFileName}" loggingLevel="DEBUG" logName="org.roag.camel.rss2html"/>
            <camel:to uri="file://{{storage.path.mobi}}"/>
        </camel:route>
        <camel:route id="toc">
            <camel:from uri="direct:toc"/>
            <camel:log message="XSLT transforming ${header.CamelFileName} by toc.xsl" loggingLevel="DEBUG" logName="org.roag.camel.rss2html"/>
            <camel:setHeader headerName="output_file">
                <camel:simple>${header.CamelFileNameOnly}</camel:simple>
            </camel:setHeader>
            <camel:to uri="{{toc.template.xslt}}"/>
            <camel:setHeader headerName="CamelFileName">
                <camel:simple>${header.CamelFileName}_toc.htm</camel:simple>
            </camel:setHeader>
            <camel:log message="Save transformation result as html ${header.CamelFileName}" loggingLevel="DEBUG" logName="org.roag.camel.rss2html"/>
            <camel:to uri="file://{{storage.path.mobi}}"/>
        </camel:route>
        <camel:route id="ncx">
            <camel:from uri="direct:ncx"/>
            <camel:log message="XSLT transforming ${header.CamelFileName} by ncx.xsl" loggingLevel="DEBUG" logName="org.roag.camel.rss2html"/>
            <camel:setHeader headerName="output_file">
                <camel:simple>${header.CamelFileNameOnly}</camel:simple>
            </camel:setHeader>
            <camel:to uri="{{ncx.template.xslt}}"/>
            <camel:setHeader headerName="CamelFileName">
                <camel:simple>${header.CamelFileName}.ncx</camel:simple>
            </camel:setHeader>
            <camel:log message="Save transformation result as ncx ${header.CamelFileName}" loggingLevel="DEBUG" logName="org.roag.camel.rss2html"/>
            <camel:to uri="file://{{storage.path.mobi}}"/>
        </camel:route>
        <camel:route id="opf">
            <camel:from uri="direct:opf"/>
            <camel:log message="XSLT transforming ${header.CamelFileName} by opf.xsl" loggingLevel="DEBUG" logName="org.roag.camel.rss2html"/>
            <camel:setHeader headerName="output_file">
                <camel:simple>${header.CamelFileNameOnly}</camel:simple>
            </camel:setHeader>
            <camel:to uri="{{opf.template.xslt}}"/>
            <camel:setHeader headerName="CamelFileName">
                <camel:simple>${header.CamelFileName}.opf</camel:simple>
            </camel:setHeader>
            <camel:log message="Save transformation result as opf ${header.CamelFileName}" loggingLevel="DEBUG" logName="org.roag.camel.rss2html"/>
            <camel:to uri="file://{{storage.path.mobi}}"/>
        </camel:route>



        <!--html to mobi transforming by kindlegen -->
        <camel:route id="kindlegen">
            <camel:from uri="seda:kindlegen"/>
            <camel:log message="Start kindlegen: {{kindlegen.path}} for file ${header.CamelFileName}" loggingLevel="DEBUG" logName="org.roag.camel.html2mobi"/>
            <camel:toD uri="exec:{{kindlegen.path}}?args={{storage.path.mobi}}${header.CamelFileName} {{kindlegen.home}}"/>
            <camel:setHeader headerName="email">
                <camel:javaScript>request.headers.get('CamelFileName').replace(new RegExp('/.*$','g'),'')</camel:javaScript>
            </camel:setHeader>
            <camel:setHeader headerName="mobiFile">
                <camel:javaScript>'{{storage.path.mobi}}' +request.headers.get('CamelFileName').replace(new RegExp('opf','g'),'mobi')</camel:javaScript>
            </camel:setHeader>
            <camel:to uri="seda:smtp"/>
        </camel:route>

        <camel:route id="smtp">
            <camel:from uri="seda:smtp"/>
            <camel:log message=" ${header.email}" loggingLevel="DEBUG" logName="org.roag.camel.smtp"/>
            <camel:filter>
                <camel:simple>${header.email} != null</camel:simple>
                <camel:setHeader headerName="feed">
                    <camel:javaScript>request.headers.get('mobiFile').replace(new RegExp('.*/','g'),'')</camel:javaScript>
                </camel:setHeader>
                <camel:setHeader headerName="attachment">
                    <camel:simple>${header.mobiFile}</camel:simple>
                </camel:setHeader>
                <camel:setBody>
                    <camel:simple>Dear ${header.name}.\n\nPlease, have a look on updates from ${header.rss}.\n\nCheers\nEurohlam
                    </camel:simple>
                </camel:setBody>
                <camel:process ref="SMTPAttachmentProcessor"/>
                <camel:log message="Send file ${header.mobiFile} to ${header.email}" loggingLevel="INFO" logName="org.roag.camel.smtp"/>
                <camel:toD uri="{{smtp.uri}}?to=${header.email}&amp;from={{smtp.from}}&amp;subject=Update from ${header.rss}&amp;contentType=text/plain"/>
            </camel:filter>
        </camel:route>

    </camel:camelContext>
</beans>