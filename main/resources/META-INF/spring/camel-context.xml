<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

    <context:property-placeholder location="classpath:/camel-context.properties"/>
    <context:component-scan base-package="org.roag"/>

    <bean id="serviceLocator" class="org.roag.camel.ServiceLocator"/>

    <!--MongoDB-->
    <bean id="mongo" class="com.mongodb.MongoClient" name="${mongodb.spring.bean}">
        <constructor-arg index="0" value="${mongodb.host}"/>
        <constructor-arg index="1" value="${mongodb.port}"/>
    </bean>

    <!--MongoHelper-->
    <bean id="mongoHelper" class="org.roag.mongo.MongoHelper">
        <constructor-arg index="0" value="${mongodb.spring.bean}"/>
        <constructor-arg index="1" value="${mongodb.camel.route}"/>
        <constructor-arg index="2" value="${mongodb.database}"/>
        <constructor-arg index="3" value="${mongodb.collection.name}"/>
    </bean>
    <!--<bean id="rssPolicy" class="org.roag.camel.RssRoutePolicy"/>-->

    <camel:camelContext id="MainCamelContext" streamCache="true">
        <!--propertyPlaceholder is required for @PropertyInject  -->
        <camel:propertyPlaceholder id="props" location="camel-context.properties"/>
        <!-- let Camel use those @Component scanned route builders -->
        <camel:contextScan/>

        <!-- extracting all active subscribers from MongoDB -->
        <camel:route id="mongo" startupOrder="0">
            <camel:from uri="{{mongodb.camel.route}}"/>
            <camel:setBody>
                <camel:constant>{{mongodb.subscribers.filter}}</camel:constant>
            </camel:setBody>
            <camel:to uri="mongodb:{{mongodb.spring.bean}}?database={{mongodb.database}}&amp;collection={{mongodb.collection.name}}&amp;operation=findAll"/>
        </camel:route>
        
        <!-- rss to html transforming by xslt-->
        <camel:route id="rss2html" startupOrder="2">
            <camel:from uri="direct:startTransformation?block=true&amp;timeout=50000"/>
            <camel:from uri="file://{{storage.path.rss}}?recursive=false&amp;noop=false&amp;delete=true"/>
            <camel:log message="XSLT transforming ${header.CamelFileName} by xslt:rss2html.xsl" loggingLevel="DEBUG" logName="org.roag.camel.rss2html"/>
            <camel:to uri="{{template.xslt.rss2html}}"/>
            <camel:setHeader headerName="CamelFileName">
                <camel:simple>${header.CamelFileName}.htm</camel:simple>
            </camel:setHeader>
            <camel:log message="Save transformation result as html ${header.CamelFileName}" loggingLevel="DEBUG" logName="org.roag.camel.rss2html"/>
            <camel:to uri="file://{{storage.path.mobi}}"/>
            <camel:to uri="seda:kindlegen"/>
        </camel:route>

        <!--html to mobi transforming by kindlegen -->
        <camel:route id="html2mobi" startupOrder="3">
            <camel:from uri="seda:kindlegen"/>
            <camel:log message="Start kindlegen: {{kindlegen.path}}" loggingLevel="DEBUG" logName="org.roag.camel.html2mobi"/>
            <camel:toD uri="exec:{{kindlegen.path}}?args={{storage.path.mobi}}${header.CamelFileName}"/>
            <camel:setHeader headerName="mobiFile">
                <camel:javaScript>'{{storage.path.mobi}}' +request.headers.get('CamelFileName').replace(new RegExp('htm','g'),'mobi')</camel:javaScript>
            </camel:setHeader>
            <camel:to uri="direct:smtp"/>
        </camel:route>

        <camel:route id="smtp" startupOrder="4">
            <camel:from uri="direct:smtp"/>
            <camel:filter>
                <camel:simple>${header.email} != null</camel:simple>
                <camel:setHeader headerName="feed">
                    <camel:javaScript>request.headers.get('mobiFile').replace(new RegExp('.*/','g'),'')</camel:javaScript>
                </camel:setHeader>
                <camel:setHeader headerName="attachment">
                    <camel:simple>${header.mobiFile}</camel:simple>
                </camel:setHeader>
                <camel:setBody>
                    <camel:simple>Dear ${header.name}.\n\nPlease, have a look on updates from ${header.rss}.\n\nCheers\nEurohlam
                    </camel:simple>
                </camel:setBody>
                <camel:process ref="SMTPAttachmentProcessor"/>
                <camel:log message="Send file ${header.mobiFile} to ${header.email}" loggingLevel="INFO" logName="org.roag.camel.smtp"/>
                <camel:toD uri="{{smtp.uri}}?to=${header.email}&amp;from={{smtp.from}}&amp;subject=Update from ${header.rss}&amp;contentType=text/plain"/>
            </camel:filter>
        </camel:route>

        <!-- main flow that run RSS polling-->
        <camel:route id="mainFlow" startupOrder="1">
            <camel:from uri="timer://runOnce?repeatCount=1&amp;delay=5000"/>
            <camel:log message="Run RSS polling for all subscribers" loggingLevel="INFO" logName="org.roag.camel.mainFlow"/>
            <camel:bean ref="RSS2XMLBuilder" method="runRssPollingForAllSubscribers"/>
            <camel:to uri="direct:smtp"/>
        </camel:route>

    </camel:camelContext>
</beans>